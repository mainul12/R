t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 8:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(swirl)
swirl()
Sys.time()
library(swirl)
install_course(Advanced R Programming)
install_course("Advanced R Programming")
install_course("Exploratory Data Analysis")
swirl()
library(swirl)
swirl()
x <- c(44,NA,5,Na)
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
rep(NA,1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
swirl()
swirl()
ls()
class(paints)
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10L)
head(plants,10)
tail(plants,15)
summary(plants)
abs(2)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
flights
nycflights13::flights.
titanic <- Titanic
class(titanic)
View(Titanic)
titanic_data <- data.frame(titanic)
class(titanic_data)
library(dplyr)
filter(titanic_data, Class == "1st")
filter(titanic_data, Class == "1st", Sex == "Male")
filter(titanic_data, Class == "1st")
head(titanic_data)
filter(titanic_data, Class == "1st", Sex == "Male")
filter(titanic_data, Class == "1st", Sex == "Male", Age == "Child")
select(titanic_data,class)
select(titanic_data,Class)
class(select(titanic_data,Class))
select(titanic_data,Age)
select(titanic_data,Age=="Adult")
select(titanic_data,Age,Freq)
select(titanic_data,Freq)
mean(select(titanic_data,Freq))
class(titanic_data$Freq)
mean(select(titanic_data,Freq)$Freq)
x <- select(titanic_data,Age,Freq)
x
tapply(x,mean)
class(x$Age)
tapply(x$Age,x$Freq,sum)
by(x, x$Age,sum)
by(x, Age,sum)
by(x, "Age",sum)
ind <- list(c(1, 2, 2), c("A", "A", "B"))
table(ind)
rbind(1:5, 3:7)
t(rbind(1:5, 3:7))
matrix(1:5,3:7)
rbind(1:5, 3:7)
class(rbind(1:5, 3:7))
rbinom (n, size = 100, prob = 0.5)
rbinom (10, size = 100, prob = 0.5)
set.seed (197)
rnorm (n = 10, mean = 0, sd = 1)
runif(12)
rnorm (25, mean = 100, sd = 15)
sample (0:25, n, replace = TRUE)
sample (0:25, 25, replace = TRUE)
rbinom (10, size = 100, prob = 0.5)
rbinom (25, size = 25, prob = 0.5)
rbinom (25, size = 100, prob = 0.5)
rbinom (25, size = 1000, prob = 0.5)
rbinom (25, size = 100, prob = 0.5)
rbinom (25, size = 100, prob = 0.7)
swirl()
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok
vapply(flags, unique, numeric(1))
ok()
help(tapply)
mtcars
data <- mtcars
class(mtcars)
View(mtcars)
head(data,2)
datas <- mtcars
rm(data)
tapply(datas$mpg, datas$cyl,mean)
titanic <- as.data.frame(Titanic)
class(titanic)
titanic
tapply(titanic$Freq, titanic$Sex,mean)
View(Titanic)
tapply(datas$mpg, datas$cyl,mean)
d <- UCBAdmissions
class(d)
d <- data.frame(UCBAdmissions)
head(d)
d
tapply(d$Gender, d$Admit, function(){d[d$Gender=="Male"]})
tapply(d$Gender, d$Admit, sum
)
tapply(d$Gender, d$Admit, sum)
tapply(d$Gender[d$Gender=="Male"], d$Admit, sum)
apply(d, c(1, 2), sum)
w <- data.frame(warpbreaks)
w
tapply(w$breaks,w$wool)
tapply(w$breaks,w$wool, sum)
tapply(w$breaks,w$tension, sum)
warpbreak <- data.frame(warpbreaks)
View(warpbreak)
tapply(warpbreak$breaks, warpbreak$wool)
tapply(warpbreak$breaks, warpbreak$wool, summary)
tapply(warpbreak$breaks, warpbreak$wool, median)
iris_data <- data.frame
iris_data <- data.frame(iris)
head(iris_data)
tapply(iris_data$Petal.Length, iris_data$Species, mean)
tapply(warpbreak$breaks, warpbreak$wool, median)
library(dplyr)
filter(iris_data,Species == "setosa")
m <- mtcars
head(m, 2)
filter(m, cyl == 6)
View(m)
?filter
filter(m, cyl == 6, mpg == 19.7)
filter(m, cyl == 6, gear == 4)
filter(m, cyl == 6, hp == 110)
select(m,mpg)
select(m,mpg[mpg == 21.0])
select(m)
select(m, mpg, cyl)
?select
select(m, -(mpg, cyl))
select(m, -c(mpg, cyl))
select(m, mpg, hp)
select(m, starts_with("m"))
select(m, starts_with("c"))
bool_to_numeric <- c(TRUE, 1, 3, 5)
bool_to_numeric
seq(5,10, by = 2)
z <- seq(5,10, by = 2)
z
z <- seq(1,5, by = 2)
z
seq(5,10)
seq(start = 5, length = 10)
seq(from = 5, length = 10)
seq(from = 5, length = 5)
seq(from = 5, length = 5, by = 2)
x <- 100:102
y <- c(10,11,12,13)
z <- c(x,7,8,9,y)
z
x <- seq(from = -10, to = 3)
x
z <- seq(from = 1, to = 5, by = 2)
z
5 %% 2
5 + 2
5 - 2
5 * 3
5 / 5
5 ^ 2
5 %% 2
5 == 5
! TRUE
c(TRUE, TRUE) && c(TRUE,TRUE)
c(TRUE, TRUE) && c(FALSE,TRUE)
c(TRUE, TRUE) & c(FALSE,TRUE)
isTRUE(TRUE)
isTRUE(5 > 5)
isTRUE(5 >= 5)
! TRUE
TRUE && TRUE
c(FALSE, TRUE) || c(FALSE, FALSE)
c(FALSE, TRUE) | c(FALSE, FALSE)
c(TRUE,TRUE) && c(FALSE, TRUE)
c(TRUE, TRUE) & c(FALSE, TRUE)
c(FALSE, TRUE) || c(FALSE, FALSE)
c(FALSE, TRUE) | c(FALSE, FALSE)
(!(TRUE & FALSE)) | ((TRUE & FALSE) & TRUE)
numerical_vector <- c(100,200,300,400,500)
numerical_vector[c(TRUE, TRUE, TRUE, FALSE, FALSE)]
numerical_vector[c(1,3)]
numerical_vector[c(2,5)]
fruit <- c(5, 10, 1, 20)
names(fruit) <- c("orange", "banana", "apple", "peach")
lunch <- fruit[c("apple","orange")]
lunch
scores <- c(100,89,94)
scores
names(score) <- c("George","Benjamin","Nikolai")
names(scores) <- c("George","Benjamin","Nikolai")
scores
scores[c("George","Nikolai")]
scores[-c("George)]
scores[-c("George")]
scores[-c("George")]
scores[-"George"]
scores[-c("Nikolai","George")]
sample(c("very good","good","neutral","bad","very bad"),12)
?sample
sample(c("very good","good","neutral","bad","very bad"),12, replace = TRUE)
sample(c("very good","good","neutral","bad","very bad"),15, replace = TRUE)
opinions <- c("neutral", "good", "bad", "neutral", "very bad", "very bad", "neutral", "good", "very good", "bad", "neutral", "very bad")
opinions
opinions <- factor(opinions)
opinions
table(opinions)
opinions <- factor(opinions, levels = c("very good","good","neutral","bad","very bad"))
opinions
table(opinions)
> opinions <- factor(opinions, levels = c("very good","good","neutral","bad","very bad"))
opinions <- factor(opinions, levels = c("very good","good","neutral","bad","very bad"))
opinions
table(opinions)
as.vector(sample(c("Jane","Marie","Natalia"),12,replace = TRUE))
x <- as.vector(sample(c("Jane","Marie","Natalia"),12,replace = TRUE))
x
names <- c("Natalia" ,"Jane"  ,"Natalia" ,"Marie" ,"Marie" ,"Jane"
,"Jane" , "Marie" ,"Natalia" ,"Jane" ,"Jane","Jane")
names
names <- factor(names)
names
table(names)
x <- c(1,2,3,4)
lapply(c, function(){x^2})
lapply(c, function(x){x^2})
lapply(x, function(x){x^2})
y <- c(1,2,3,4)
lapply(x, function(x){x^2})
y <- c(1,2,3,4)
lapply(x, function(x){x^2})
y <- c(1,2,3,4)
lapply(x, function(x){x%%2})
list(y)
z <- list(y)
lapply(z, function(x){x^2})
p <- list(c(1,2,3,4),c(5,6,7))
p
lapply(p, function(x){x^2})
p <- list(c(1,2,3,4),c(5,6,7))
lapply(p, function(x){x^2})
x
y
sapply(y,function(x){x^2})
p
sapply(p,function(x){x^2})
q <- list(4,5)
1
q
sapply(q,function(x){x^2})
p
sapply(p,function(x){x^2})
p
my_adder_function <- function(argument_1, argument_2){argument_1 + argument_2}
my_adder_function(9,2)
x <- c(10,20,30)
if (length(x)>3){
print("The length of the vector is greater than three")
}
## creating a vector
x <- c(10,20,30)
if (length(x)>3){
print("The length of the vector is greater than three")
} else
print("The length of the vector is either equal to three or less than three")
if (TRUE){print(2*4)}else print(2+2)
sample(c(1,2,3,4,5),size = 100, replace = TRUE)
set.seed(197)
rnorm(n = 1000, 10,10)
boxplot(rnorm(n = 1000, 10,10))
m <- mtcars
library(ggplot2)
View(m)
ggplot(m, aes(gear, hp)) + geom_boxplot()
ggplot(m, aes(hp, gear)) + geom_boxplot()
ggplot(m, aes(cyl, disp.)) + geom_boxplot()
ggplot(m, aes(cyl, disp)) + geom_boxplot()
ggplot(m, aes(cyl, hp)) + geom_boxplot()
ggplot(m, aes(hp, cyl)) + geom_boxplot()
x <- 10
while(x < 20){
print (x*2)
x <- x + 2
}
x <- 20
while(x > 15){
print(x)
x <- x + 1
}
w <- warpbreaks
class(w)
w
tapply(w, INDEX = w$wool, median)
tapply(w$breaks, INDEX = w$wool, median)
head(w)
tapply(w$breaks, INDEX = w$wool, sum)
runif(12)
set.seed(197)
runif(12)
runif(12)
runif(12)
set.seed(197)
runif(12)
set.seed(197)
runif(12)
set.seed(197)
runif(12)
runif(12, min = 1, max = 12)
rbinom (25, size = 100, prob = 0.7)
titanic <- Titanic
# coverting titanic dataset to a dataframe using the data.frame() function
titanic_data <- data.frame(titanic)
titanic
library(dplyr)
select(titanic_data,Sex, Age)
select(titanic_data,Age, Sex)
library(ggplot2)
datum <- iris
iris_data <- data.frame(datum)
gggplot(iris_data,aes(iris_data$Sepal.Length)) + geom_histogram()
library(ggplot2)
gggplot(iris_data,aes(iris_data$Sepal.Length)) + geom_histogram()
ggplot(iris_data,aes(iris_data$Sepal.Length)) + geom_histogram()
ggplot(iris_data,aes(iris_data$Sepal.Width)) + geom_histogram()
ggplot(iris_data,aes(iris_data$Petal.Width)) + geom_histogram()
getwd()
titanic <- Titanic
titanic_data <- data.frame(titanic)
View(titanic_data)
titanic_data[titanic_data$Sex == "Male"]
titanic_data[,titanic_data$Sex == "Male"]
titanic_data[titanic_data$Sex == "Male",]
warpbreak <- data.frame(warpbreaks)
iris_data <- data.frame(iris)
View(warpbreak)
tapply(warpbreak,warpbreak$breaks,median)
tapply(warpbreak,warpbreak$wool,median)
tapply(warpbreak$breaks,warpbreak$wool,median)
View(iris_data)
tapply(iris_data$Petal.Length,iris_data$Species,mean)
library(swirl)
swirl()
library(swirl)
swirl()
library(readr)
datapath
print(datapath)
datafile <- file.path(datapath,urban.csv.gz)
datafile <- file.path(datapath,"urban.csv.gz")
urban <- read_csv(datafile)
head(urban)
urban <- read_csv(datafile,col_types = "_/-c_/-_/-_/-")
urban <- read_csv(datafile,col_types = "_/c_/_/_/")
urban <- read_csv(datafile,col_types = "_c___")
urban <- read_csv(datafile,col_types = "-c---")
urban <- read_csv(datafile,col_types = "cccdc")
urban <- read_csv(datafile,col_types = "cccd")
info()
urban <- read_csv(datafile,col_types = "cccd",col_skip("FIPS"))
urban <- read_csv(datafile,col_types = "cccd",col_skip(FIPS))
?col_skip
urban <- read_csv(datafile,col_types = "cccdna")
urban <- read_csv(datafile,col_types = "cccdn")
urban <- read_csv(datafile,col_types = "cccd-")
head(urban)
?read_csv
urban <- read_csv(datafile,col_types = "cccd-",n_max = 100)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
submit()
submit()
wc_1
submit()
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% mean(c(Time,Passes,Tackles,Saves))
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% mean
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% mean()
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% mean(Time)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% summarise(worldcup$Time)
mean(select(wordcup,Time))
mean(c(wordcup$Time))
mean(select(worldcup,Time))
mean(c(worldcup$Time))
mean(c(worldcup$Time,Passes,Tackles,Saves))
mean(c(worldcup$Time,worldcup$Passes,worldcup$Tackles,worldcup$Saves))
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% mean((Time,Passes,Tackles,Saves))
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% mutate(mean)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% mutate(mean())
info()
skip()
skip()
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves)) %>%
gather(var, mean)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves)) %>%
gather(var, mean) %>% round()
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves)) %>%
gather(var, mean) %>% round(mean)
skip()
View(titanic)
submit()
skip()
skip()
skip()
2 + 2
?tidyverse
?cut
install.packages("tidyverse")
library(tidyverse)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(1)
rpois(5, 2)
install.packages("tidyverse")
library(tidyverse)
?read_csv
?read_csv
setwd("C:\\Users\\aaaaaaaa\\Documents\\GitHub\\R\\Getting and Cleaning Data\\Week 1")
## reading the cameras.csv file
cameraData <- read.table("./data/cameras.csv",
sep = ",", header = TRUE) ## default separator in this function is <TAB>
head(cameraData)
cameraData_csv <- read.csv("./data/cameras.csv")
head(cameraData_csv)
